{"version":3,"sources":["webpack://portfolio/./src/components/Canvas.js","webpack://portfolio/./src/css/chip8Page.module.css","webpack://portfolio/./src/components/ChipDiv.js","webpack://portfolio/./src/components/KeyHandler.js","webpack://portfolio/./src/components/OpcodeExtractor.js","webpack://portfolio/./src/pages/Projects/Chip8.js"],"names":["props","draw","height","width","borderStyle","canvasRef","useRef","useEffect","animationFrameId","context","current","getContext","render","window","requestAnimationFrame","cancelAnimationFrame","ref","className","pText","boxText","instructionLine","centerDiv","chipButton","line","pcRef","indexRef","opRef","delayRef","soundRef","stackRef","v0","v1","v2","v3","v4","v5","v6","v7","v8","v9","vA","vB","vC","vD","vE","vF","RegisterLine","regNum","blank","css","get_value","pcText","indexText","opText","soundText","delayText","siText","v0Text","v1Text","v2Text","v3Text","v4Text","v5Text","v6Text","v7Text","v8Text","v9Text","vAText","vBText","vCText","vDText","vEText","vFText","values","innerHTML","pc","toString","index","opcode","dt","st","si","registers","handleKeyDown","e","chip8","key","set_key_down","handleKeyUp","set_key_up","extract_opcode_name","x","y","nnn","nn","n","between","min","max","style","useContext","StyleContext","useState","chip","setChip","memory","setMem","speed","setSpeed","loading","setLoading","isPaused","setPaused","clicked","setClicked","showScreen","setScreen","large_screen","useMediaQuery","query","medium_screen","loadWASM","module","memModule","CHIP8","new","loadROM","selectedROM","memPtr","get_memory","cpu_memory","Uint8Array","buffer","fetch","rom","arrayBuffer","arrBuffer","romData","DataView","byteLength","i","getUint8","addEventListener","getIndex","row","column","get_pixel_size","setStyle","setTimeout","Helmet","title","charSet","name","content","onChange","target","value","reset","resetLoad","onClick","ctx","pixel_size","fillStyle","fillRect","videoPtr","get_video","pixels","WIDTH","beginPath","col","stroke","tick","get_pc","get_index","get_sound_timer","get_delay_timer","get_stack_index","get_registers","get_opcode"],"mappings":"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","file":"component---src-pages-projects-chip-8-js-c07b42094a5f975f4faa.js","sourcesContent":["import React from \"react\";\nimport { useEffect, useRef } from \"react\";\n\nconst Canvas = (props) => {\n    const { draw, height, width, borderStyle } = props;\n    const canvasRef = useRef(null);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const context = canvas.getContext(\"2d\");\n\n        let animationFrameId;\n\n        const render = () => {\n            draw(context);\n            animationFrameId = window.requestAnimationFrame(render);\n        };\n        render();\n\n        return () => {\n            window.cancelAnimationFrame(animationFrameId);\n        };\n    }, [draw]);\n\n    return (\n        <canvas\n            ref={canvasRef}\n            className={borderStyle}\n            width={width}\n            height={height}\n        />\n    );\n};\n\nexport default Canvas;\n","// extracted by mini-css-extract-plugin\nexport var cssMain = \"chip8Page-module--cssMain--3vxsB\";\nexport var title = \"chip8Page-module--title--2wMmR\";\nexport var desc = \"chip8Page-module--desc--1kkid\";\nexport var pText = \"chip8Page-module--pText--23yX5\";\nexport var pTitle = \"chip8Page-module--pTitle--3Kbts\";\nexport var textBox = \"chip8Page-module--textBox--2946a\";\nexport var boxText = \"chip8Page-module--boxText--3QnRc\";\nexport var instructionLine = \"chip8Page-module--instructionLine--22rVM\";\nexport var instructionTitle = \"chip8Page-module--instructionTitle--29rCT\";\nexport var centerDiv = \"chip8Page-module--centerDiv--752J8\";\nexport var canvasBorder = \"chip8Page-module--canvasBorder--3TeJ9\";\nexport var canvasNoBorder = \"chip8Page-module--canvasNoBorder--v1Uz5\";\nexport var canvasDiv = \"chip8Page-module--canvasDiv--1swOu\";\nexport var chipButton = \"chip8Page-module--chipButton--3Brnh\";\nexport var line = \"chip8Page-module--line--3EH8E\";\nexport var buttonFlex = \"chip8Page-module--buttonFlex--45BYJ\";","import React from \"react\";\nimport { useEffect, useRef } from \"react\";\n\nimport * as css from \"../css/chip8Page.module.css\";\n\nconst ChipDiv = (props) => {\n    const pcRef = useRef(null);\n    const indexRef = useRef(null);\n    const opRef = useRef(null);\n    const delayRef = useRef(null);\n    const soundRef = useRef(null);\n    const stackRef = useRef(null);\n\n    const v0 = useRef(null);\n    const v1 = useRef(null);\n    const v2 = useRef(null);\n    const v3 = useRef(null);\n    const v4 = useRef(null);\n    const v5 = useRef(null);\n    const v6 = useRef(null);\n    const v7 = useRef(null);\n    const v8 = useRef(null);\n    const v9 = useRef(null);\n    const vA = useRef(null);\n    const vB = useRef(null);\n    const vC = useRef(null);\n    const vD = useRef(null);\n    const vE = useRef(null);\n    const vF = useRef(null);\n\n    const RegisterLine = (regNum, ref, blank = true) => {\n        return (\n            <>\n                {blank && (\n                    <>\n                        <span />\n                        <span />\n                    </>\n                )}\n                <text className={css.boxText}>{`V${regNum}: `}</text>\n                <text className={css.boxText} ref={ref} />\n            </>\n        );\n    };\n\n    const { get_value } = props;\n\n    useEffect(() => {\n        const pcText = pcRef.current;\n        const indexText = indexRef.current;\n        const opText = opRef.current;\n        const soundText = soundRef.current;\n        const delayText = delayRef.current;\n        const siText = stackRef.current;\n\n        const v0Text = v0.current;\n        const v1Text = v1.current;\n        const v2Text = v2.current;\n        const v3Text = v3.current;\n        const v4Text = v4.current;\n        const v5Text = v5.current;\n        const v6Text = v6.current;\n        const v7Text = v7.current;\n        const v8Text = v8.current;\n        const v9Text = v9.current;\n        const vAText = vA.current;\n        const vBText = vB.current;\n        const vCText = vC.current;\n        const vDText = vD.current;\n        const vEText = vE.current;\n        const vFText = vF.current;\n\n        let animationFrameId;\n\n        const render = () => {\n            if (get_value()) {\n                const values = get_value();\n\n                pcText.innerHTML = `0x${values.pc.toString(16)}`;\n                indexText.innerHTML = `0x${values.index.toString(16)}`;\n                opText.innerHTML = `${values.opcode}`;\n                delayText.innerHTML = `0x${values.dt.toString(16)}`;\n                soundText.innerHTML = `0x${values.st.toString(16)}`;\n                siText.innerHTML = `0x${values.si.toString(16)}`;\n\n                v0Text.innerHTML = `0x${values.registers[0x0].toString(16)}`;\n                v1Text.innerHTML = `0x${values.registers[0x1].toString(16)}`;\n                v2Text.innerHTML = `0x${values.registers[0x2].toString(16)}`;\n                v3Text.innerHTML = `0x${values.registers[0x3].toString(16)}`;\n                v4Text.innerHTML = `0x${values.registers[0x4].toString(16)}`;\n                v5Text.innerHTML = `0x${values.registers[0x5].toString(16)}`;\n                v6Text.innerHTML = `0x${values.registers[0x6].toString(16)}`;\n                v7Text.innerHTML = `0x${values.registers[0x7].toString(16)}`;\n                v8Text.innerHTML = `0x${values.registers[0x8].toString(16)}`;\n                v9Text.innerHTML = `0x${values.registers[0x9].toString(16)}`;\n                vAText.innerHTML = `0x${values.registers[0xa].toString(16)}`;\n                vBText.innerHTML = `0x${values.registers[0xb].toString(16)}`;\n                vCText.innerHTML = `0x${values.registers[0xc].toString(16)}`;\n                vDText.innerHTML = `0x${values.registers[0xd].toString(16)}`;\n                vEText.innerHTML = `0x${values.registers[0xe].toString(16)}`;\n                vFText.innerHTML = `0x${values.registers[0xf].toString(16)}`;\n            }\n            animationFrameId = window.requestAnimationFrame(render);\n        };\n        render();\n\n        return () => {\n            window.cancelAnimationFrame(animationFrameId);\n        };\n    }, [get_value]);\n\n    return (\n        <div className={css.textBox}>\n            <text className={css.boxText}>PC: </text>\n            <text className={css.boxText} ref={pcRef} />\n            {RegisterLine(\"0\", v0, false)}\n\n            <text className={css.boxText}>Index: </text>\n            <text className={css.boxText} ref={indexRef} />\n            {RegisterLine(\"1\", v1, false)}\n\n            <text className={css.boxText}>SI: </text>\n            <text className={css.boxText} ref={stackRef} />\n            {RegisterLine(\"2\", v2, false)}\n\n            <text className={css.boxText}>DT: </text>\n            <text className={css.boxText} ref={delayRef} />\n            {RegisterLine(\"3\", v3, false)}\n\n            <text className={css.boxText}>ST: </text>\n            <text className={css.boxText} ref={soundRef} />\n            {RegisterLine(\"4\", v4, false)}\n\n            <text className={css.boxText}>OP: </text>\n            <span />\n            {RegisterLine(\"5\", v5, false)}\n\n            <text className={css.boxText} ref={opRef} />\n            <span />\n            {RegisterLine(\"6\", v6, false)}\n\n            {RegisterLine(\"7\", v7)}\n            {RegisterLine(\"8\", v8)}\n\n            {RegisterLine(\"9\", v9)}\n            {RegisterLine(\"a\", vA)}\n\n            {RegisterLine(\"b\", vB)}\n            {RegisterLine(\"c\", vC)}\n\n            {RegisterLine(\"d\", vD)}\n            {RegisterLine(\"e\", vE)}\n\n            {RegisterLine(\"f\", vF)}\n        </div>\n    );\n};\n\nexport default ChipDiv;\n","/*  Keypad:\n *  1 2 3 4\n *  q w e r\n *  a s d f\n *  z x c v\n */\n\nexport const handleKeyDown = (e, chip8) => {\n    switch (e.key) {\n        case \"1\":\n            chip8.set_key_down(0x1);\n            break;\n        case \"2\":\n            chip8.set_key_down(0x2);\n            break;\n        case \"3\":\n            chip8.set_key_down(0x3);\n            break;\n        case \"4\":\n            chip8.set_key_down(0xc);\n            break;\n        case \"a\":\n            chip8.set_key_down(0x7);\n            break;\n        case \"s\":\n            chip8.set_key_down(0x8);\n            break;\n        case \"d\":\n            chip8.set_key_down(0x9);\n            break;\n        case \"f\":\n            chip8.set_key_down(0xe);\n            break;\n        case \"q\":\n            chip8.set_key_down(0x4);\n            break;\n        case \"w\":\n            chip8.set_key_down(0x5);\n            break;\n        case \"e\":\n            chip8.set_key_down(0x6);\n            break;\n        case \"r\":\n            chip8.set_key_down(0xd);\n            break;\n        case \"z\":\n            chip8.set_key_down(0xa);\n            break;\n        case \"x\":\n            chip8.set_key_down(0x0);\n            break;\n        case \"c\":\n            chip8.set_key_down(0xb);\n            break;\n        case \"v\":\n            chip8.set_key_down(0xf);\n            break;\n        default:\n            break;\n    }\n};\n\nexport const handleKeyUp = (e, chip8) => {\n    switch (e.key) {\n        case \"1\":\n            chip8.set_key_up(0x1);\n            break;\n        case \"2\":\n            chip8.set_key_up(0x2);\n            break;\n        case \"3\":\n            chip8.set_key_up(0x3);\n            break;\n        case \"4\":\n            chip8.set_key_up(0xc);\n            break;\n        case \"a\":\n            chip8.set_key_up(0x7);\n            break;\n        case \"s\":\n            chip8.set_key_up(0x8);\n            break;\n        case \"d\":\n            chip8.set_key_up(0x9);\n            break;\n        case \"f\":\n            chip8.set_key_up(0xe);\n            break;\n        case \"q\":\n            chip8.set_key_up(0x4);\n            break;\n        case \"w\":\n            chip8.set_key_up(0x5);\n            break;\n        case \"e\":\n            chip8.set_key_up(0x6);\n            break;\n        case \"r\":\n            chip8.set_key_up(0xd);\n            break;\n        case \"z\":\n            chip8.set_key_up(0xa);\n            break;\n        case \"x\":\n            chip8.set_key_up(0x0);\n            break;\n        case \"c\":\n            chip8.set_key_up(0xb);\n            break;\n        case \"v\":\n            chip8.set_key_up(0xf);\n            break;\n        default:\n            break;\n    }\n};\n","export const extract_opcode_name = (opcode) => {\n    // Opcode nibbles for matching\n    let x = (opcode & 0x0f00) >> 8;\n    let y = (opcode & 0x00f0) >> 4;\n\n    // Common parts of opcode\n    let nnn = opcode & 0x0fff;\n    let nn = opcode & 0x00ff;\n    let n = opcode & 0x000f;\n\n    if (opcode === 0x00e0) return \"CLS\";\n    if (opcode === 0x00ee) return \"RET\";\n    if (between(opcode, 0x1000, 0x1fff)) return `JP 0x${nnn.toString(16)}`;\n    if (between(opcode, 0x2000, 0x2fff)) return `CALL 0x${nnn.toString(16)}`;\n    if (between(opcode, 0x3000, 0x3fff)) return `SE V${n} 0x${nn.toString(16)}`;\n    if (between(opcode, 0x4000, 0x4fff))\n        return `SNE V${n} 0x${nn.toString(16)}`;\n    if (between(opcode, 0x5000, 0x5fff))\n        return `SE V${x.toString(16)} V${y.toString(16)}`;\n    if (between(opcode, 0x6000, 0x6fff))\n        return `LD V${x.toString(16)} 0x${nn.toString(16)}`;\n    if (between(opcode, 0x7000, 0x7fff))\n        return `ADD V${x.toString(16)} 0x${nn.toString(16)}`;\n    if (between(opcode, 0x8000, 0x8fff)) {\n        if (n === 0x0) return `LD V${x.toString(16)} V${y.toString(16)}`;\n        if (n === 0x1) return `OR V${x.toString(16)} V${y.toString(16)}`;\n        if (n === 0x2) return `AND V${x.toString(16)} V${y.toString(16)}`;\n        if (n === 0x3) return `XOR V${x.toString(16)} V${y.toString(16)}`;\n        if (n === 0x4) return `ADD V${x.toString(16)} V${y.toString(16)}`;\n        if (n === 0x5) return `SUB V${x.toString(16)} V${y.toString(16)}`;\n        if (n === 0x6) return `SHR V${x.toString(16)}`;\n        if (n === 0x7) return `SUBN V${x.toString(16)} V${y.toString(16)}`;\n        if (n === 0xe) return `SHL V${x.toString(16)}`;\n    }\n    if (between(opcode, 0x9000, 0x9fff))\n        return `SNE V${x.toString(16)} V${y.toString(16)}`;\n    if (between(opcode, 0xa000, 0xafff)) return `LDI 0x${nnn.toString(16)}`;\n    if (between(opcode, 0xb000, 0xbfff)) return `JP V0 0x${nnn.toString(16)}`;\n    if (between(opcode, 0xc000, 0xcfff)) return `RND 0x${nn.toString(16)}`;\n    if (between(opcode, 0xd000, 0xdfff))\n        return `DRW V${x.toString(16)} V${y.toString(16)} ${n}`;\n    if (between(opcode, 0xe000, 0xefff)) {\n        if (nn === 0x9e) return `SKP V${x.toString(16)}`;\n        if (nn === 0xa1) return `SKNP V${x.toString(16)}`;\n    }\n    if (between(opcode, 0xf000, 0xffff)) {\n        if (nn === 0x07) return `LD V${x.toString(16)} DT`;\n        if (nn === 0x0a) return `LD V${x.toString(16)} K`;\n        if (nn === 0x15) return `LD DT V${x.toString(16)}`;\n        if (nn === 0x18) return `LD ST V${x.toString(16)}`;\n        if (nn === 0x1e) return `ADD I V${x.toString(16)}`;\n        if (nn === 0x29) return `LD F V${x.toString(16)}`;\n        if (nn === 0x33) return `LD B V${x.toString(16)}`;\n        if (nn === 0x55) return `LD I V${x.toString(16)}`;\n        if (nn === 0x65) return `LD V${x.toString(16)} I`;\n    }\n\n    return \"-\";\n};\n\nconst between = (x, min, max) => {\n    return x >= min && x <= max;\n};\n","import * as React from \"react\";\nimport { useEffect, useContext, useRef, useState } from \"react\";\n\nimport StyleContext from \"../../components/Context\";\nimport Canvas from \"../../components/Canvas\";\nimport ChipDiv from \"../../components/ChipDiv\";\nimport { handleKeyDown, handleKeyUp } from \"../../components/KeyHandler\";\nimport { extract_opcode_name } from \"../../components/OpcodeExtractor\";\nimport { useMediaQuery } from \"react-responsive\";\nimport { Helmet } from \"react-helmet\";\n\nimport * as css from \"../../css/chip8Page.module.css\";\n\nconst SET_COLOR = \"#70FF70\";\nconst UNSET_COLOR = \"#000000\";\nconst WIDTH = 64;\nconst HEIGHT = 32;\nconst LARGE_PIXEL_SIZE = 8;\nconst MEDIUM_PIXEL_SIZE = 6;\nconst SMALL_PIXEL_SIZE = 4;\n\nconst Chip8 = () => {\n    const style = useRef(useContext(StyleContext));\n    const [chip, setChip] = useState(null);\n    const [memory, setMem] = useState(null);\n    const [speed, setSpeed] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [isPaused, setPaused] = useState(true);\n    const [clicked, setClicked] = useState(false);\n    const [showScreen, setScreen] = useState(false);\n\n    const large_screen = useMediaQuery({ query: \"(min-width: 1200px)\" });\n    const medium_screen = useMediaQuery({ query: \"(min-width: 500px)\" });\n\n    const loadWASM = async () => {\n        // Load WASM from our package\n\n        // The reason for this useless concatenation\n        // is to get rid of a really specific issue\n        // with Webpack and WASM modules being imported\n        // all in one line.\n\n        /*eslint no-useless-concat: \"off\"*/\n        const module = await import(\"boone8/\" + \"boone8.js\");\n        const memModule = await import(\"boone8/\" + \"boone8_bg.wasm\");\n        const memory = memModule.memory;\n\n        const chip = module.CHIP8.new();\n        setChip(chip);\n        setMem(memory);\n    };\n\n    const loadROM = async (selectedROM) => {\n        if (chip) {\n            // Get Chip8 Memory\n            const memPtr = chip.get_memory();\n            const cpu_memory = new Uint8Array(memory.buffer, memPtr, 4096);\n\n            // Get ROM from file\n            const rom = await fetch(`/roms/${selectedROM}`);\n            const arrBuffer = await rom.arrayBuffer();\n\n            // Copy ROM memory into Chip8 memory\n            const romData = new DataView(arrBuffer, 0, arrBuffer.byteLength);\n            for (let i = 0; i < romData.byteLength; i++) {\n                cpu_memory[0x200 + i] = romData.getUint8(i);\n            }\n\n            window.addEventListener(\"keyup\", (e) => handleKeyUp(e, chip));\n            window.addEventListener(\"keydown\", (e) => handleKeyDown(e, chip));\n            setLoading(false);\n        }\n    };\n\n    const getIndex = (row, column) => row * 64 + column;\n\n    const draw = (ctx) => {\n        const pixel_size = get_pixel_size();\n        const videoPtr = chip.get_video();\n        const pixels = new Uint8Array(memory.buffer, videoPtr, WIDTH * HEIGHT);\n\n        ctx.beginPath();\n        ctx.fillStyle = SET_COLOR;\n        for (let row = 0; row < HEIGHT; row++) {\n            for (let col = 0; col < WIDTH; col++) {\n                const idx = getIndex(row, col);\n                if (pixels[idx] === 0) {\n                    continue;\n                }\n\n                ctx.fillRect(\n                    col * pixel_size,\n                    row * pixel_size,\n                    pixel_size,\n                    pixel_size\n                );\n            }\n        }\n\n        ctx.fillStyle = UNSET_COLOR;\n        for (let row = 0; row < HEIGHT; row++) {\n            for (let col = 0; col < WIDTH; col++) {\n                const idx = getIndex(row, col);\n                if (pixels[idx] !== 0) {\n                    continue;\n                }\n\n                ctx.fillRect(\n                    col * pixel_size,\n                    row * pixel_size,\n                    pixel_size,\n                    pixel_size\n                );\n            }\n        }\n        ctx.stroke();\n\n        // Cycles through opcodes by calling the tick method\n        if (!isPaused || (isPaused && clicked)) {\n            for (let i = 0; i < speed; i++) {\n                chip.tick();\n            }\n        }\n    };\n\n    const draw_nothing = (ctx) => {\n        const pixel_size = get_pixel_size();\n        ctx.fillStyle = \"#000000\";\n        ctx.fillRect(0, 0, WIDTH * pixel_size, HEIGHT * pixel_size);\n    };\n\n    const resetLoad = (e) => {\n        if (e.target.value) {\n            setLoading(true);\n            chip.reset();\n            loadROM(e.target.value);\n        }\n    };\n\n    const get_pixel_size = () => {\n        if (large_screen) return LARGE_PIXEL_SIZE;\n        else if (medium_screen) return MEDIUM_PIXEL_SIZE;\n        else return SMALL_PIXEL_SIZE;\n    };\n\n    const get_chip_values = () => {\n        if (chip && memory) {\n            return {\n                pc: chip.get_pc(),\n                index: chip.get_index(),\n                st: chip.get_sound_timer(),\n                dt: chip.get_delay_timer(),\n                si: chip.get_stack_index(),\n                registers: new Uint8Array(\n                    memory.buffer,\n                    chip.get_registers(),\n                    16\n                ),\n                opcode: extract_opcode_name(chip.get_opcode()),\n            };\n        }\n    };\n\n    useEffect(() => {\n        loadWASM();\n        style.current.setStyle(true);\n        setTimeout(() => {\n            setScreen(true);\n        }, 100)\n    }, []);\n\n    useEffect(() => {\n        setClicked(false);\n    }, [clicked]);\n\n    return (\n        <>\n            <Helmet title=\"Jarrod Boone::Boone8\">\n                <meta charSet=\"utf-8\" />\n                <meta\n                    name=\"description\"\n                    content=\"A Chip8 Emulator, written in Rust and Compiled to WebAssembly\"\n                />\n                <meta name=\"author\" content=\"Jarrod Boone\" />\n                <meta name=\"keywords\" content=\"Rust, Opcodes, NES, emulator\" />\n                <meta name=\"viewport\" content=\"width=device-width\" />\n                <meta name=\"language\" content=\"en\" />\n            </Helmet>\n            <main className={css.cssMain}>\n                <h1 className={css.title}>Boone-8</h1>\n                <p className={css.desc}>\n                    A Chip8 Emulator written in Rust and compiled to\n                    WebAssembly.\n                </p>\n                <div className={css.centerDiv}>\n                    <div className={css.buttonFlex}>\n                        <select\n                            className={css.chipButton}\n                            onChange={(e) => resetLoad(e)}\n                        >\n                            <option value=\"\">Load ROM</option>\n                            <option value=\"Astro.ch8\">Astro</option>\n                            <option value=\"Blinky.ch8\">Blinky</option>\n                            <option value=\"Bowling.ch8\">Bowling</option>\n                            <option value=\"Cave.ch8\">Cave</option>\n                            <option value=\"Connect4.ch8\">Connect4</option>\n                            <option value=\"Landing.ch8\">Landing</option>\n                            <option value=\"Pong.ch8\">Pong</option>\n                            <option value=\"Puzzle.ch8\">Puzzle</option>\n                            <option value=\"Rocket.ch8\">Rocket</option>\n                            <option value=\"Slide.ch8\">Slide</option>\n                            <option value=\"Soccer.ch8\">Soccer</option>\n                            <option value=\"Space.ch8\">Space</option>\n                            <option value=\"Submarine.ch8\">Submarine</option>\n                            <option value=\"Tank.ch8\">Tank</option>\n                            <option value=\"Tetris.ch8\">Tetris</option>\n                            <option value=\"Timebomb.ch8\">Timebomb</option>\n                            <option value=\"Tron.ch8\">Tron</option>\n                            <option value=\"WipeOff.ch8\">WipeOff</option>\n                            <option value=\"Worm.ch8\">Worm</option>\n                        </select>\n                        <select\n                            className={css.chipButton}\n                            value={speed}\n                            onChange={(e) => setSpeed(e.target.value)}\n                        >\n                            <option value={0}>Speed</option>\n                            <option value={1}>x1</option>\n                            <option value={2}>x2</option>\n                            <option value={4}>x4</option>\n                            <option value={8}>x8</option>\n                            <option value={10}>x10</option>\n                        </select>\n                        <button\n                            onClick={() => setPaused(!isPaused)}\n                            className={css.chipButton}\n                        >\n                            {isPaused ? \"Start\" : \"Stop\"}\n                        </button>\n                        <button\n                            className={css.chipButton}\n                            onClick={() => setClicked(true)}\n                        >\n                            Step\n                        </button>\n                    </div>\n                </div>\n                <div className={css.canvasDiv}>\n                    {showScreen && \n                    <Canvas\n                        draw={loading ? draw_nothing : draw}\n                        pixel_size={get_pixel_size()}\n                        width={get_pixel_size() * 64}\n                        height={get_pixel_size() * 32}\n                        borderStyle={css.canvasBorder}\n                    />\n                    }\n                </div>\n                <div className={css.centerDiv}>\n                    <ChipDiv get_value={get_chip_values} />\n                </div>\n                <br />\n                <hr className={css.line} />\n                <p className={css.instructionTitle}>Controls</p>\n                <hr className={css.line} />\n                <p className={css.instructionLine}>1 2 3 4</p>\n                <p className={css.instructionLine}>Q W E R</p>\n                <p className={css.instructionLine}>A S D F</p>\n                <p className={css.instructionLine}>Z X C V</p>\n                <hr className={css.line} />\n                <p className={css.pTitle}>What is this?</p>\n                <p className={css.pText}>\n                    This is an emulator for the Chip8 interpreted programming\n                    language. An emulator is just a piece of hardware/software\n                    that is written to behave like another piece of\n                    hardware/software. In this example, I emulated the Chip8\n                    interpreted programming language, which was made in the\n                    1970s. It was designed to allow video games to easily be\n                    programmed for the computers of that era, like the Telmac\n                    1800.\n                </p>\n                <p className={css.pText}>\n                    I was always fascinated with the idea of creating software\n                    that behaved like hardware. I wanted to try my hand at\n                    emulating older video game consoles, and from my research,\n                    it seemed that the Chip8 was the goto baby's first emulator.\n                    It is ideal for its simplistic instruction set, only having\n                    about 35 opcodes to interpret.\n                </p>\n                <p className={css.pText}>\n                    In the future, I'd like to try emulating the Nintendo\n                    Entertainment System (NES).\n                </p>\n            </main>\n        </>\n    );\n};\n\nexport default Chip8;\n"],"sourceRoot":""}